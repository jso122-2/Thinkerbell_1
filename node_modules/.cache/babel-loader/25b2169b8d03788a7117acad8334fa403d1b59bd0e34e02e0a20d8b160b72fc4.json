{"ast":null,"code":"import axios from 'axios';\n\n// Base API configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for debugging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, config.data);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status}`, response.data);\n  return response.data;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$response3$data;\n  console.error('API Response Error:', error);\n  if (error.code === 'ECONNREFUSED') {\n    throw new Error('API server is not running. Please start it with: npm run api:start');\n  }\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n    throw new Error('API endpoint not found');\n  }\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500) {\n    throw new Error('Server error. Please try again later.');\n  }\n  throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message || 'Unknown API error');\n});\n\n// Semantic API endpoints\nexport const semanticAPI = {\n  // Health check\n  health: () => api.get('/health'),\n  // Main processing\n  process: data => api.post('/process', data),\n  // Real-time preview\n  preview: data => api.post('/preview', data),\n  // Classification explanation\n  explain: data => api.post('/explain', data),\n  // Content suggestions\n  getSuggestions: data => api.post('/suggestions', data),\n  // Batch processing\n  batchProcess: data => api.post('/batch', data),\n  // User learning\n  addLearning: data => api.post('/learn', data),\n  // Statistics\n  getStats: () => api.get('/stats'),\n  // Backend connection\n  connectBackend: data => api.post('/connect-backend', data),\n  // Templates\n  getTemplates: () => api.get('/templates')\n};\n\n// Export default api instance for custom requests\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$response2","_error$response3","_error$response3$data","code","Error","message","semanticAPI","health","get","post","preview","explain","getSuggestions","batchProcess","addLearning","getStats","connectBackend","getTemplates"],"sources":["C:/Users/Admin/OneDrive/Desktop/scripts/Thinkerbell/Thinkerbell_template_pipeline/webapp/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base API configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for debugging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`, config.data);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`API Response: ${response.status}`, response.data);\r\n    return response.data;\r\n  },\r\n  (error) => {\r\n    console.error('API Response Error:', error);\r\n    \r\n    if (error.code === 'ECONNREFUSED') {\r\n      throw new Error('API server is not running. Please start it with: npm run api:start');\r\n    }\r\n    \r\n    if (error.response?.status === 404) {\r\n      throw new Error('API endpoint not found');\r\n    }\r\n    \r\n    if (error.response?.status >= 500) {\r\n      throw new Error('Server error. Please try again later.');\r\n    }\r\n    \r\n    throw new Error(error.response?.data?.error || error.message || 'Unknown API error');\r\n  }\r\n);\r\n\r\n// Semantic API endpoints\r\nexport const semanticAPI = {\r\n  // Health check\r\n  health: () => api.get('/health'),\r\n  \r\n  // Main processing\r\n  process: (data) => api.post('/process', data),\r\n  \r\n  // Real-time preview\r\n  preview: (data) => api.post('/preview', data),\r\n  \r\n  // Classification explanation\r\n  explain: (data) => api.post('/explain', data),\r\n  \r\n  // Content suggestions\r\n  getSuggestions: (data) => api.post('/suggestions', data),\r\n  \r\n  // Batch processing\r\n  batchProcess: (data) => api.post('/batch', data),\r\n  \r\n  // User learning\r\n  addLearning: (data) => api.post('/learn', data),\r\n  \r\n  // Statistics\r\n  getStats: () => api.get('/stats'),\r\n  \r\n  // Backend connection\r\n  connectBackend: (data) => api.post('/connect-backend', data),\r\n  \r\n  // Templates\r\n  getTemplates: () => api.get('/templates'),\r\n};\r\n\r\n// Export default api instance for custom requests\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}