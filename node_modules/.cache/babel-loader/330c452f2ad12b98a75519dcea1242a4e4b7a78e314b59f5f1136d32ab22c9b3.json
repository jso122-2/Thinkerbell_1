{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{semanticAPI}from'../services/api';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const SemanticContext=/*#__PURE__*/createContext();export const useSemanticContext=()=>{const context=useContext(SemanticContext);if(!context){throw new Error('useSemanticContext must be used within a SemanticProvider');}return context;};export const SemanticProvider=_ref=>{let{children}=_ref;const[state,setState]=useState({// API Status\napiConnected:false,pythonBackendConnected:false,loading:false,// Current Content\ncurrentContent:'',currentTemplate:'slide_deck',// Processing Results\nlastResult:null,routing:{},analytics:null,suggestions:{},// Real-time Preview\npreview:'',previewLoading:false,// Templates\navailableTemplates:[],// Settings\nsettings:{enableSemanticRouting:true,enableConfidenceIndicators:true,enableContentSuggestions:true,enableValidation:true,confidenceThreshold:0.3,realTimePreview:true},// Analytics Data\nprocessingHistory:[],performanceMetrics:{averageProcessingTime:0,totalProcessed:0,categoryCounts:{Hunch:0,Wisdom:0,Nudge:0,Spell:0}}});// Check API connection on mount\nuseEffect(()=>{checkAPIConnection();loadTemplates();loadSettings();},[]);const checkAPIConnection=async()=>{try{const health=await semanticAPI.health();setState(prev=>({...prev,apiConnected:true,pythonBackendConnected:health.backend_connected}));}catch(error){setState(prev=>({...prev,apiConnected:false,pythonBackendConnected:false}));toast.error('API connection failed. Make sure the server is running.');}};const loadTemplates=async()=>{try{const templates=await semanticAPI.getTemplates();setState(prev=>({...prev,availableTemplates:templates.templates||[]}));}catch(error){console.error('Failed to load templates:',error);}};const loadSettings=()=>{const saved=localStorage.getItem('thinkerbell-settings');if(saved){try{const settings=JSON.parse(saved);setState(prev=>({...prev,settings:{...prev.settings,...settings}}));}catch(error){console.error('Failed to load settings:',error);}}};const saveSettings=newSettings=>{const updated={...state.settings,...newSettings};setState(prev=>({...prev,settings:updated}));localStorage.setItem('thinkerbell-settings',JSON.stringify(updated));};const processContent=async function(content){let templateName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;setState(prev=>({...prev,loading:true}));try{var _result$metadata;const result=await semanticAPI.process({content,template_name:templateName||state.currentTemplate,options:{enableSemanticRouting:state.settings.enableSemanticRouting,enableConfidenceIndicators:state.settings.enableConfidenceIndicators,enableContentSuggestions:state.settings.enableContentSuggestions,enableValidation:state.settings.enableValidation,includeAnalytics:true}});// Update processing history\nconst historyEntry={id:Date.now(),content:content.substring(0,100)+'...',template:templateName||state.currentTemplate,timestamp:new Date().toISOString(),processingTime:((_result$metadata=result.metadata)===null||_result$metadata===void 0?void 0:_result$metadata.processing_time)||0,analytics:result.result.analytics};setState(prev=>({...prev,loading:false,lastResult:result.result,routing:result.result.semanticRouting||{},analytics:result.result.analytics,suggestions:result.result.suggestions||{},processingHistory:[historyEntry,...prev.processingHistory.slice(0,49)],// Keep last 50\nperformanceMetrics:updatePerformanceMetrics(prev.performanceMetrics,historyEntry)}));toast.success('Content processed successfully!');return result.result;}catch(error){setState(prev=>({...prev,loading:false}));toast.error('Processing failed: '+error.message);throw error;}};const generatePreview=async function(content){let templateName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!state.settings.realTimePreview||!content.trim()){return;}setState(prev=>({...prev,previewLoading:true}));try{const result=await semanticAPI.preview({content,template_name:templateName||state.currentTemplate});setState(prev=>{var _result$preview,_result$preview2,_result$preview3,_result$preview4;return{...prev,previewLoading:false,preview:((_result$preview=result.preview)===null||_result$preview===void 0?void 0:_result$preview.preview)||'',routing:((_result$preview2=result.preview)===null||_result$preview2===void 0?void 0:_result$preview2.routing)||{},analytics:(_result$preview3=result.preview)===null||_result$preview3===void 0?void 0:_result$preview3.analytics,suggestions:((_result$preview4=result.preview)===null||_result$preview4===void 0?void 0:_result$preview4.suggestions)||{}};});}catch(error){setState(prev=>({...prev,previewLoading:false}));console.error('Preview failed:',error);}};const explainClassification=async sentence=>{try{const result=await semanticAPI.explain({sentence});return result.explanation;}catch(error){toast.error('Explanation failed: '+error.message);throw error;}};const getSmartSuggestions=async content=>{try{const result=await semanticAPI.getSuggestions({content});return result.suggestions;}catch(error){toast.error('Failed to get suggestions: '+error.message);throw error;}};const updatePerformanceMetrics=(current,newEntry)=>{var _newEntry$analytics;const newTotal=current.totalProcessed+1;const newAverage=(current.averageProcessingTime*current.totalProcessed+newEntry.processingTime)/newTotal;const newCategoryCounts={...current.categoryCounts};if((_newEntry$analytics=newEntry.analytics)!==null&&_newEntry$analytics!==void 0&&_newEntry$analytics.distribution){Object.entries(newEntry.analytics.distribution).forEach(_ref2=>{let[category,data]=_ref2;newCategoryCounts[category]=(newCategoryCounts[category]||0)+data.count;});}return{averageProcessingTime:newAverage,totalProcessed:newTotal,categoryCounts:newCategoryCounts};};const clearHistory=()=>{setState(prev=>({...prev,processingHistory:[],performanceMetrics:{averageProcessingTime:0,totalProcessed:0,categoryCounts:{Hunch:0,Wisdom:0,Nudge:0,Spell:0}}}));toast.success('History cleared');};const updateContent=content=>{setState(prev=>({...prev,currentContent:content}));// Debounced preview generation\nif(state.settings.realTimePreview){clearTimeout(window.previewTimeout);window.previewTimeout=setTimeout(()=>{generatePreview(content);},500);}};const updateTemplate=template=>{setState(prev=>({...prev,currentTemplate:template}));};const value={...state,// Actions\nprocessContent,generatePreview,explainClassification,getSmartSuggestions,updateContent,updateTemplate,saveSettings,clearHistory,checkAPIConnection,// Utilities\nisConnected:state.apiConnected,hasBackend:state.pythonBackendConnected,canProcess:state.apiConnected&&!state.loading};return/*#__PURE__*/_jsx(SemanticContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","semanticAPI","toast","jsx","_jsx","SemanticContext","useSemanticContext","context","Error","SemanticProvider","_ref","children","state","setState","apiConnected","pythonBackendConnected","loading","currentContent","currentTemplate","lastResult","routing","analytics","suggestions","preview","previewLoading","availableTemplates","settings","enableSemanticRouting","enableConfidenceIndicators","enableContentSuggestions","enableValidation","confidenceThreshold","realTimePreview","processingHistory","performanceMetrics","averageProcessingTime","totalProcessed","categoryCounts","Hunch","Wisdom","Nudge","Spell","checkAPIConnection","loadTemplates","loadSettings","health","prev","backend_connected","error","templates","getTemplates","console","saved","localStorage","getItem","JSON","parse","saveSettings","newSettings","updated","setItem","stringify","processContent","content","templateName","arguments","length","undefined","_result$metadata","result","process","template_name","options","includeAnalytics","historyEntry","id","Date","now","substring","template","timestamp","toISOString","processingTime","metadata","processing_time","semanticRouting","slice","updatePerformanceMetrics","success","message","generatePreview","trim","_result$preview","_result$preview2","_result$preview3","_result$preview4","explainClassification","sentence","explain","explanation","getSmartSuggestions","getSuggestions","current","newEntry","_newEntry$analytics","newTotal","newAverage","newCategoryCounts","distribution","Object","entries","forEach","_ref2","category","data","count","clearHistory","updateContent","clearTimeout","window","previewTimeout","setTimeout","updateTemplate","value","isConnected","hasBackend","canProcess","Provider"],"sources":["/root/Thinkerbell/Thinkerbell_template_pipeline/webapp/src/context/SemanticContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { semanticAPI } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst SemanticContext = createContext();\r\n\r\nexport const useSemanticContext = () => {\r\n  const context = useContext(SemanticContext);\r\n  if (!context) {\r\n    throw new Error('useSemanticContext must be used within a SemanticProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SemanticProvider = ({ children }) => {\r\n  const [state, setState] = useState({\r\n    // API Status\r\n    apiConnected: false,\r\n    pythonBackendConnected: false,\r\n    loading: false,\r\n    \r\n    // Current Content\r\n    currentContent: '',\r\n    currentTemplate: 'slide_deck',\r\n    \r\n    // Processing Results\r\n    lastResult: null,\r\n    routing: {},\r\n    analytics: null,\r\n    suggestions: {},\r\n    \r\n    // Real-time Preview\r\n    preview: '',\r\n    previewLoading: false,\r\n    \r\n    // Templates\r\n    availableTemplates: [],\r\n    \r\n    // Settings\r\n    settings: {\r\n      enableSemanticRouting: true,\r\n      enableConfidenceIndicators: true,\r\n      enableContentSuggestions: true,\r\n      enableValidation: true,\r\n      confidenceThreshold: 0.3,\r\n      realTimePreview: true\r\n    },\r\n    \r\n    // Analytics Data\r\n    processingHistory: [],\r\n    performanceMetrics: {\r\n      averageProcessingTime: 0,\r\n      totalProcessed: 0,\r\n      categoryCounts: {\r\n        Hunch: 0,\r\n        Wisdom: 0,\r\n        Nudge: 0,\r\n        Spell: 0\r\n      }\r\n    }\r\n  });\r\n\r\n  // Check API connection on mount\r\n  useEffect(() => {\r\n    checkAPIConnection();\r\n    loadTemplates();\r\n    loadSettings();\r\n  }, []);\r\n\r\n  const checkAPIConnection = async () => {\r\n    try {\r\n      const health = await semanticAPI.health();\r\n      setState(prev => ({\r\n        ...prev,\r\n        apiConnected: true,\r\n        pythonBackendConnected: health.backend_connected\r\n      }));\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        apiConnected: false,\r\n        pythonBackendConnected: false\r\n      }));\r\n      toast.error('API connection failed. Make sure the server is running.');\r\n    }\r\n  };\r\n\r\n  const loadTemplates = async () => {\r\n    try {\r\n      const templates = await semanticAPI.getTemplates();\r\n      setState(prev => ({\r\n        ...prev,\r\n        availableTemplates: templates.templates || []\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to load templates:', error);\r\n    }\r\n  };\r\n\r\n  const loadSettings = () => {\r\n    const saved = localStorage.getItem('thinkerbell-settings');\r\n    if (saved) {\r\n      try {\r\n        const settings = JSON.parse(saved);\r\n        setState(prev => ({\r\n          ...prev,\r\n          settings: { ...prev.settings, ...settings }\r\n        }));\r\n      } catch (error) {\r\n        console.error('Failed to load settings:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveSettings = (newSettings) => {\r\n    const updated = { ...state.settings, ...newSettings };\r\n    setState(prev => ({\r\n      ...prev,\r\n      settings: updated\r\n    }));\r\n    localStorage.setItem('thinkerbell-settings', JSON.stringify(updated));\r\n  };\r\n\r\n  const processContent = async (content, templateName = null) => {\r\n    setState(prev => ({ ...prev, loading: true }));\r\n    \r\n    try {\r\n      const result = await semanticAPI.process({\r\n        content,\r\n        template_name: templateName || state.currentTemplate,\r\n        options: {\r\n          enableSemanticRouting: state.settings.enableSemanticRouting,\r\n          enableConfidenceIndicators: state.settings.enableConfidenceIndicators,\r\n          enableContentSuggestions: state.settings.enableContentSuggestions,\r\n          enableValidation: state.settings.enableValidation,\r\n          includeAnalytics: true\r\n        }\r\n      });\r\n\r\n      // Update processing history\r\n      const historyEntry = {\r\n        id: Date.now(),\r\n        content: content.substring(0, 100) + '...',\r\n        template: templateName || state.currentTemplate,\r\n        timestamp: new Date().toISOString(),\r\n        processingTime: result.metadata?.processing_time || 0,\r\n        analytics: result.result.analytics\r\n      };\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        lastResult: result.result,\r\n        routing: result.result.semanticRouting || {},\r\n        analytics: result.result.analytics,\r\n        suggestions: result.result.suggestions || {},\r\n        processingHistory: [historyEntry, ...prev.processingHistory.slice(0, 49)], // Keep last 50\r\n        performanceMetrics: updatePerformanceMetrics(prev.performanceMetrics, historyEntry)\r\n      }));\r\n\r\n      toast.success('Content processed successfully!');\r\n      return result.result;\r\n    } catch (error) {\r\n      setState(prev => ({ ...prev, loading: false }));\r\n      toast.error('Processing failed: ' + error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const generatePreview = async (content, templateName = null) => {\r\n    if (!state.settings.realTimePreview || !content.trim()) {\r\n      return;\r\n    }\r\n\r\n    setState(prev => ({ ...prev, previewLoading: true }));\r\n    \r\n    try {\r\n      const result = await semanticAPI.preview({\r\n        content,\r\n        template_name: templateName || state.currentTemplate\r\n      });\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        previewLoading: false,\r\n        preview: result.preview?.preview || '',\r\n        routing: result.preview?.routing || {},\r\n        analytics: result.preview?.analytics,\r\n        suggestions: result.preview?.suggestions || {}\r\n      }));\r\n    } catch (error) {\r\n      setState(prev => ({ ...prev, previewLoading: false }));\r\n      console.error('Preview failed:', error);\r\n    }\r\n  };\r\n\r\n  const explainClassification = async (sentence) => {\r\n    try {\r\n      const result = await semanticAPI.explain({ sentence });\r\n      return result.explanation;\r\n    } catch (error) {\r\n      toast.error('Explanation failed: ' + error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getSmartSuggestions = async (content) => {\r\n    try {\r\n      const result = await semanticAPI.getSuggestions({ content });\r\n      return result.suggestions;\r\n    } catch (error) {\r\n      toast.error('Failed to get suggestions: ' + error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updatePerformanceMetrics = (current, newEntry) => {\r\n    const newTotal = current.totalProcessed + 1;\r\n    const newAverage = (current.averageProcessingTime * current.totalProcessed + newEntry.processingTime) / newTotal;\r\n    \r\n    const newCategoryCounts = { ...current.categoryCounts };\r\n    if (newEntry.analytics?.distribution) {\r\n      Object.entries(newEntry.analytics.distribution).forEach(([category, data]) => {\r\n        newCategoryCounts[category] = (newCategoryCounts[category] || 0) + data.count;\r\n      });\r\n    }\r\n\r\n    return {\r\n      averageProcessingTime: newAverage,\r\n      totalProcessed: newTotal,\r\n      categoryCounts: newCategoryCounts\r\n    };\r\n  };\r\n\r\n  const clearHistory = () => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      processingHistory: [],\r\n      performanceMetrics: {\r\n        averageProcessingTime: 0,\r\n        totalProcessed: 0,\r\n        categoryCounts: { Hunch: 0, Wisdom: 0, Nudge: 0, Spell: 0 }\r\n      }\r\n    }));\r\n    toast.success('History cleared');\r\n  };\r\n\r\n  const updateContent = (content) => {\r\n    setState(prev => ({ ...prev, currentContent: content }));\r\n    \r\n    // Debounced preview generation\r\n    if (state.settings.realTimePreview) {\r\n      clearTimeout(window.previewTimeout);\r\n      window.previewTimeout = setTimeout(() => {\r\n        generatePreview(content);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const updateTemplate = (template) => {\r\n    setState(prev => ({ ...prev, currentTemplate: template }));\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    \r\n    // Actions\r\n    processContent,\r\n    generatePreview,\r\n    explainClassification,\r\n    getSmartSuggestions,\r\n    updateContent,\r\n    updateTemplate,\r\n    saveSettings,\r\n    clearHistory,\r\n    checkAPIConnection,\r\n    \r\n    // Utilities\r\n    isConnected: state.apiConnected,\r\n    hasBackend: state.pythonBackendConnected,\r\n    canProcess: state.apiConnected && !state.loading\r\n  };\r\n\r\n  return (\r\n    <SemanticContext.Provider value={value}>\r\n      {children}\r\n    </SemanticContext.Provider>\r\n  );\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,WAAW,KAAQ,iBAAiB,CAC7C,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpC,KAAM,CAAAC,eAAe,cAAGR,aAAa,CAAC,CAAC,CAEvC,MAAO,MAAM,CAAAS,kBAAkB,CAAGA,CAAA,GAAM,CACtC,KAAM,CAAAC,OAAO,CAAGT,UAAU,CAACO,eAAe,CAAC,CAC3C,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,2DAA2D,CAAC,CAC9E,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAE,gBAAgB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3C,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,CACjC;AACAe,YAAY,CAAE,KAAK,CACnBC,sBAAsB,CAAE,KAAK,CAC7BC,OAAO,CAAE,KAAK,CAEd;AACAC,cAAc,CAAE,EAAE,CAClBC,eAAe,CAAE,YAAY,CAE7B;AACAC,UAAU,CAAE,IAAI,CAChBC,OAAO,CAAE,CAAC,CAAC,CACXC,SAAS,CAAE,IAAI,CACfC,WAAW,CAAE,CAAC,CAAC,CAEf;AACAC,OAAO,CAAE,EAAE,CACXC,cAAc,CAAE,KAAK,CAErB;AACAC,kBAAkB,CAAE,EAAE,CAEtB;AACAC,QAAQ,CAAE,CACRC,qBAAqB,CAAE,IAAI,CAC3BC,0BAA0B,CAAE,IAAI,CAChCC,wBAAwB,CAAE,IAAI,CAC9BC,gBAAgB,CAAE,IAAI,CACtBC,mBAAmB,CAAE,GAAG,CACxBC,eAAe,CAAE,IACnB,CAAC,CAED;AACAC,iBAAiB,CAAE,EAAE,CACrBC,kBAAkB,CAAE,CAClBC,qBAAqB,CAAE,CAAC,CACxBC,cAAc,CAAE,CAAC,CACjBC,cAAc,CAAE,CACdC,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,CAAC,CACTC,KAAK,CAAE,CAAC,CACRC,KAAK,CAAE,CACT,CACF,CACF,CAAC,CAAC,CAEF;AACAzC,SAAS,CAAC,IAAM,CACd0C,kBAAkB,CAAC,CAAC,CACpBC,aAAa,CAAC,CAAC,CACfC,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAF,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF,KAAM,CAAAG,MAAM,CAAG,KAAM,CAAA5C,WAAW,CAAC4C,MAAM,CAAC,CAAC,CACzChC,QAAQ,CAACiC,IAAI,GAAK,CAChB,GAAGA,IAAI,CACPhC,YAAY,CAAE,IAAI,CAClBC,sBAAsB,CAAE8B,MAAM,CAACE,iBACjC,CAAC,CAAC,CAAC,CACL,CAAE,MAAOC,KAAK,CAAE,CACdnC,QAAQ,CAACiC,IAAI,GAAK,CAChB,GAAGA,IAAI,CACPhC,YAAY,CAAE,KAAK,CACnBC,sBAAsB,CAAE,KAC1B,CAAC,CAAC,CAAC,CACHb,KAAK,CAAC8C,KAAK,CAAC,yDAAyD,CAAC,CACxE,CACF,CAAC,CAED,KAAM,CAAAL,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAM,SAAS,CAAG,KAAM,CAAAhD,WAAW,CAACiD,YAAY,CAAC,CAAC,CAClDrC,QAAQ,CAACiC,IAAI,GAAK,CAChB,GAAGA,IAAI,CACPrB,kBAAkB,CAAEwB,SAAS,CAACA,SAAS,EAAI,EAC7C,CAAC,CAAC,CAAC,CACL,CAAE,MAAOD,KAAK,CAAE,CACdG,OAAO,CAACH,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACnD,CACF,CAAC,CAED,KAAM,CAAAJ,YAAY,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAAQ,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC,CAC1D,GAAIF,KAAK,CAAE,CACT,GAAI,CACF,KAAM,CAAA1B,QAAQ,CAAG6B,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAClCvC,QAAQ,CAACiC,IAAI,GAAK,CAChB,GAAGA,IAAI,CACPpB,QAAQ,CAAE,CAAE,GAAGoB,IAAI,CAACpB,QAAQ,CAAE,GAAGA,QAAS,CAC5C,CAAC,CAAC,CAAC,CACL,CAAE,MAAOsB,KAAK,CAAE,CACdG,OAAO,CAACH,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CACF,CAAC,CAED,KAAM,CAAAS,YAAY,CAAIC,WAAW,EAAK,CACpC,KAAM,CAAAC,OAAO,CAAG,CAAE,GAAG/C,KAAK,CAACc,QAAQ,CAAE,GAAGgC,WAAY,CAAC,CACrD7C,QAAQ,CAACiC,IAAI,GAAK,CAChB,GAAGA,IAAI,CACPpB,QAAQ,CAAEiC,OACZ,CAAC,CAAC,CAAC,CACHN,YAAY,CAACO,OAAO,CAAC,sBAAsB,CAAEL,IAAI,CAACM,SAAS,CAACF,OAAO,CAAC,CAAC,CACvE,CAAC,CAED,KAAM,CAAAG,cAAc,CAAG,cAAAA,CAAOC,OAAO,CAA0B,IAAxB,CAAAC,YAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACxDpD,QAAQ,CAACiC,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE9B,OAAO,CAAE,IAAK,CAAC,CAAC,CAAC,CAE9C,GAAI,KAAAoD,gBAAA,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAApE,WAAW,CAACqE,OAAO,CAAC,CACvCP,OAAO,CACPQ,aAAa,CAAEP,YAAY,EAAIpD,KAAK,CAACM,eAAe,CACpDsD,OAAO,CAAE,CACP7C,qBAAqB,CAAEf,KAAK,CAACc,QAAQ,CAACC,qBAAqB,CAC3DC,0BAA0B,CAAEhB,KAAK,CAACc,QAAQ,CAACE,0BAA0B,CACrEC,wBAAwB,CAAEjB,KAAK,CAACc,QAAQ,CAACG,wBAAwB,CACjEC,gBAAgB,CAAElB,KAAK,CAACc,QAAQ,CAACI,gBAAgB,CACjD2C,gBAAgB,CAAE,IACpB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,YAAY,CAAG,CACnBC,EAAE,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACdd,OAAO,CAAEA,OAAO,CAACe,SAAS,CAAC,CAAC,CAAE,GAAG,CAAC,CAAG,KAAK,CAC1CC,QAAQ,CAAEf,YAAY,EAAIpD,KAAK,CAACM,eAAe,CAC/C8D,SAAS,CAAE,GAAI,CAAAJ,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC,CACnCC,cAAc,CAAE,EAAAd,gBAAA,CAAAC,MAAM,CAACc,QAAQ,UAAAf,gBAAA,iBAAfA,gBAAA,CAAiBgB,eAAe,GAAI,CAAC,CACrD/D,SAAS,CAAEgD,MAAM,CAACA,MAAM,CAAChD,SAC3B,CAAC,CAEDR,QAAQ,CAACiC,IAAI,GAAK,CAChB,GAAGA,IAAI,CACP9B,OAAO,CAAE,KAAK,CACdG,UAAU,CAAEkD,MAAM,CAACA,MAAM,CACzBjD,OAAO,CAAEiD,MAAM,CAACA,MAAM,CAACgB,eAAe,EAAI,CAAC,CAAC,CAC5ChE,SAAS,CAAEgD,MAAM,CAACA,MAAM,CAAChD,SAAS,CAClCC,WAAW,CAAE+C,MAAM,CAACA,MAAM,CAAC/C,WAAW,EAAI,CAAC,CAAC,CAC5CW,iBAAiB,CAAE,CAACyC,YAAY,CAAE,GAAG5B,IAAI,CAACb,iBAAiB,CAACqD,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CAAC,CAAE;AAC3EpD,kBAAkB,CAAEqD,wBAAwB,CAACzC,IAAI,CAACZ,kBAAkB,CAAEwC,YAAY,CACpF,CAAC,CAAC,CAAC,CAEHxE,KAAK,CAACsF,OAAO,CAAC,iCAAiC,CAAC,CAChD,MAAO,CAAAnB,MAAM,CAACA,MAAM,CACtB,CAAE,MAAOrB,KAAK,CAAE,CACdnC,QAAQ,CAACiC,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE9B,OAAO,CAAE,KAAM,CAAC,CAAC,CAAC,CAC/Cd,KAAK,CAAC8C,KAAK,CAAC,qBAAqB,CAAGA,KAAK,CAACyC,OAAO,CAAC,CAClD,KAAM,CAAAzC,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAA0C,eAAe,CAAG,cAAAA,CAAO3B,OAAO,CAA0B,IAAxB,CAAAC,YAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACzD,GAAI,CAACrD,KAAK,CAACc,QAAQ,CAACM,eAAe,EAAI,CAAC+B,OAAO,CAAC4B,IAAI,CAAC,CAAC,CAAE,CACtD,OACF,CAEA9E,QAAQ,CAACiC,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAEtB,cAAc,CAAE,IAAK,CAAC,CAAC,CAAC,CAErD,GAAI,CACF,KAAM,CAAA6C,MAAM,CAAG,KAAM,CAAApE,WAAW,CAACsB,OAAO,CAAC,CACvCwC,OAAO,CACPQ,aAAa,CAAEP,YAAY,EAAIpD,KAAK,CAACM,eACvC,CAAC,CAAC,CAEFL,QAAQ,CAACiC,IAAI,OAAA8C,eAAA,CAAAC,gBAAA,CAAAC,gBAAA,CAAAC,gBAAA,OAAK,CAChB,GAAGjD,IAAI,CACPtB,cAAc,CAAE,KAAK,CACrBD,OAAO,CAAE,EAAAqE,eAAA,CAAAvB,MAAM,CAAC9C,OAAO,UAAAqE,eAAA,iBAAdA,eAAA,CAAgBrE,OAAO,GAAI,EAAE,CACtCH,OAAO,CAAE,EAAAyE,gBAAA,CAAAxB,MAAM,CAAC9C,OAAO,UAAAsE,gBAAA,iBAAdA,gBAAA,CAAgBzE,OAAO,GAAI,CAAC,CAAC,CACtCC,SAAS,EAAAyE,gBAAA,CAAEzB,MAAM,CAAC9C,OAAO,UAAAuE,gBAAA,iBAAdA,gBAAA,CAAgBzE,SAAS,CACpCC,WAAW,CAAE,EAAAyE,gBAAA,CAAA1B,MAAM,CAAC9C,OAAO,UAAAwE,gBAAA,iBAAdA,gBAAA,CAAgBzE,WAAW,GAAI,CAAC,CAC/C,CAAC,EAAC,CAAC,CACL,CAAE,MAAO0B,KAAK,CAAE,CACdnC,QAAQ,CAACiC,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAEtB,cAAc,CAAE,KAAM,CAAC,CAAC,CAAC,CACtD2B,OAAO,CAACH,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACzC,CACF,CAAC,CAED,KAAM,CAAAgD,qBAAqB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAChD,GAAI,CACF,KAAM,CAAA5B,MAAM,CAAG,KAAM,CAAApE,WAAW,CAACiG,OAAO,CAAC,CAAED,QAAS,CAAC,CAAC,CACtD,MAAO,CAAA5B,MAAM,CAAC8B,WAAW,CAC3B,CAAE,MAAOnD,KAAK,CAAE,CACd9C,KAAK,CAAC8C,KAAK,CAAC,sBAAsB,CAAGA,KAAK,CAACyC,OAAO,CAAC,CACnD,KAAM,CAAAzC,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAoD,mBAAmB,CAAG,KAAO,CAAArC,OAAO,EAAK,CAC7C,GAAI,CACF,KAAM,CAAAM,MAAM,CAAG,KAAM,CAAApE,WAAW,CAACoG,cAAc,CAAC,CAAEtC,OAAQ,CAAC,CAAC,CAC5D,MAAO,CAAAM,MAAM,CAAC/C,WAAW,CAC3B,CAAE,MAAO0B,KAAK,CAAE,CACd9C,KAAK,CAAC8C,KAAK,CAAC,6BAA6B,CAAGA,KAAK,CAACyC,OAAO,CAAC,CAC1D,KAAM,CAAAzC,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAuC,wBAAwB,CAAGA,CAACe,OAAO,CAAEC,QAAQ,GAAK,KAAAC,mBAAA,CACtD,KAAM,CAAAC,QAAQ,CAAGH,OAAO,CAAClE,cAAc,CAAG,CAAC,CAC3C,KAAM,CAAAsE,UAAU,CAAG,CAACJ,OAAO,CAACnE,qBAAqB,CAAGmE,OAAO,CAAClE,cAAc,CAAGmE,QAAQ,CAACrB,cAAc,EAAIuB,QAAQ,CAEhH,KAAM,CAAAE,iBAAiB,CAAG,CAAE,GAAGL,OAAO,CAACjE,cAAe,CAAC,CACvD,IAAAmE,mBAAA,CAAID,QAAQ,CAAClF,SAAS,UAAAmF,mBAAA,WAAlBA,mBAAA,CAAoBI,YAAY,CAAE,CACpCC,MAAM,CAACC,OAAO,CAACP,QAAQ,CAAClF,SAAS,CAACuF,YAAY,CAAC,CAACG,OAAO,CAACC,KAAA,EAAsB,IAArB,CAACC,QAAQ,CAAEC,IAAI,CAAC,CAAAF,KAAA,CACvEL,iBAAiB,CAACM,QAAQ,CAAC,CAAG,CAACN,iBAAiB,CAACM,QAAQ,CAAC,EAAI,CAAC,EAAIC,IAAI,CAACC,KAAK,CAC/E,CAAC,CAAC,CACJ,CAEA,MAAO,CACLhF,qBAAqB,CAAEuE,UAAU,CACjCtE,cAAc,CAAEqE,QAAQ,CACxBpE,cAAc,CAAEsE,iBAClB,CAAC,CACH,CAAC,CAED,KAAM,CAAAS,YAAY,CAAGA,CAAA,GAAM,CACzBvG,QAAQ,CAACiC,IAAI,GAAK,CAChB,GAAGA,IAAI,CACPb,iBAAiB,CAAE,EAAE,CACrBC,kBAAkB,CAAE,CAClBC,qBAAqB,CAAE,CAAC,CACxBC,cAAc,CAAE,CAAC,CACjBC,cAAc,CAAE,CAAEC,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAC,CAAEC,KAAK,CAAE,CAAC,CAAEC,KAAK,CAAE,CAAE,CAC5D,CACF,CAAC,CAAC,CAAC,CACHvC,KAAK,CAACsF,OAAO,CAAC,iBAAiB,CAAC,CAClC,CAAC,CAED,KAAM,CAAA6B,aAAa,CAAItD,OAAO,EAAK,CACjClD,QAAQ,CAACiC,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE7B,cAAc,CAAE8C,OAAQ,CAAC,CAAC,CAAC,CAExD;AACA,GAAInD,KAAK,CAACc,QAAQ,CAACM,eAAe,CAAE,CAClCsF,YAAY,CAACC,MAAM,CAACC,cAAc,CAAC,CACnCD,MAAM,CAACC,cAAc,CAAGC,UAAU,CAAC,IAAM,CACvC/B,eAAe,CAAC3B,OAAO,CAAC,CAC1B,CAAC,CAAE,GAAG,CAAC,CACT,CACF,CAAC,CAED,KAAM,CAAA2D,cAAc,CAAI3C,QAAQ,EAAK,CACnClE,QAAQ,CAACiC,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE5B,eAAe,CAAE6D,QAAS,CAAC,CAAC,CAAC,CAC5D,CAAC,CAED,KAAM,CAAA4C,KAAK,CAAG,CACZ,GAAG/G,KAAK,CAER;AACAkD,cAAc,CACd4B,eAAe,CACfM,qBAAqB,CACrBI,mBAAmB,CACnBiB,aAAa,CACbK,cAAc,CACdjE,YAAY,CACZ2D,YAAY,CACZ1E,kBAAkB,CAElB;AACAkF,WAAW,CAAEhH,KAAK,CAACE,YAAY,CAC/B+G,UAAU,CAAEjH,KAAK,CAACG,sBAAsB,CACxC+G,UAAU,CAAElH,KAAK,CAACE,YAAY,EAAI,CAACF,KAAK,CAACI,OAC3C,CAAC,CAED,mBACEZ,IAAA,CAACC,eAAe,CAAC0H,QAAQ,EAACJ,KAAK,CAAEA,KAAM,CAAAhH,QAAA,CACpCA,QAAQ,CACe,CAAC,CAE/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}